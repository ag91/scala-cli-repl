* Testing
Run tests:
#+begin_src elisp :results none
(let ((current-pos (point)))
  ;; Remove RESULTS blocks to know where we stopped
  (goto-char (point-min))
  (ignore-errors
    (while (org-babel-next-src-block 1)
      (org-babel-remove-result-one-or-many nil)))

  ;; Execute code blocks
  (goto-char current-pos)
  (while (org-babel-next-src-block 1)
    (unless (= (org-element-property :begin (org-element-at-point)) current-pos)
      (org-babel-execute-src-block)))

  (goto-char current-pos))
#+end_src

Change if needed:
#+begin_src elisp :results none
(setq-local jvm 17
            scala2 "2.13.11"
            scala3 "3.3.0"
            dep-os-lib "com.lihaoyi::os-lib:0.9.1"
            dep-pprint "com.lihaoyi::pprint:0.7.0")

(setq-local scala-cli-ob-force-kill t ; Don't ask to kill the buffer if options changed
            ob-scala-cli-default-params `(:scala-version ,scala2 :jvm ,jvm)) ; Default options

(ob-scala-cli-kill-buffer)
#+end_src

It is expected that results at least the same.

* Tests
** Simple one-liner
#+begin_src scala
1 + 1
#+end_src

#+RESULTS:
: val res0: Int = 2

** Compilation errors in Scala 2.13
*** Without a wrapping object
#+begin_src scala
def always1(x: Int): Int = 1
def foo(x: Int): Int = println("error")
def id(x: Int): Int = x
#+end_src

#+RESULTS:
: def always1(x: Int): Int
:        def foo(x: Int): Int = println("error")
:                                      ^
: On line 1: error: type mismatch;
:         found   : Unit
:         required: Int
: def id(x: Int): Int

**** Note
It shows a wrong error line, because Scala 2.13 doesn't allow top level definitions outside package objects.

*** With a wrapping object
#+begin_src scala
object Test {
  def always1(x: Int): Int = 1
  def foo(x: Int): Int = println("error")
  def id(x: Int): Int = x
}
#+end_src

#+RESULTS:
: def foo(x: Int): Int = println("error")
:                                        ^
: On line 3: error: type mismatch;
:         found   : Unit
:         required: Int

** Function definition
#+begin_src scala
def increment(x: Int): Int = x + 1
#+end_src

#+RESULTS:
: def increment(x: Int): Int

** Usage of the function defined in one of previous blocks
#+begin_src scala
increment(1)
#+end_src

#+RESULTS:
: val res1: Int = 2

** Isolate definitions
#+begin_src scala
{
  def foo(x: Int): Int = x + 1
  foo(2)
}
#+end_src

#+RESULTS:
: val res2: Int = 3

#+begin_src scala
foo(3)
#+end_src

#+RESULTS:
: foo(3)
:        ^
: On line 1: error: not found: value foo

** Dependency
#+begin_src scala :dep `(,dep-os-lib)
{
  val file = os.pwd / "ob-scala-cli-tests.org"
  println(s"Is ${file.last} a file? ${os.isFile(file)}")
}
#+end_src

#+RESULTS:
: Is ob-scala-cli-tests.org a file? true

** Previous definitions lost after changing options
#+begin_src scala :dep `(,dep-os-lib)
increment(1)
#+end_src

#+RESULTS:
: increment(1)
:        ^
: On line 1: error: not found: value increment

*** Note
If you want to preserve definitions between org src blocks, either:
- Define same options in all blocks;
- Set default options somewhere, for example in the beginning of the org file:
  #+begin_quote
  # -*- ob-scala-cli-default-params: '(:scala-version "2.13.11" :jvm 17 :dep '("com.lihaoyi::os-lib:0.9.1" "com.lihaoyi::pprint:0.7.0")); -*-
  #+end_quote
  and don't override options in blocks.

** Multiple dependencies
#+begin_src scala :dep `(,dep-os-lib ,dep-pprint)
{
  val file = os.pwd / "ob-scala-cli-tests.org"
  println(s"Is ${file.last} a file? ${os.isFile(file)}")
}
pprint.pprintln(Seq(1, 2, 3), width = 5)
#+end_src

#+RESULTS:
: Is ob-scala-cli-tests.org a file? true
: List(
:   1,
:   2,
:   3
: )

** Compilation errors in Scala 3
*** Without wrapping object
#+begin_src scala :scala-version (format "%s" scala3)
def always1(x: Int): Int = 1
def foo(x: Int): Int = println("error")
def id(x: Int): Int = x
#+end_src

#+RESULTS:
: -- [E007] Type Mismatch Error: -------------------------------------------------
: 2 |def foo(x: Int): Int = println("error")
:   |                       ^^^^^^^^^^^^^^^^
:   |                       Found:    Unit
:   |                       Required: Int
:   |
:   | longer explanation available when compiling with `-explain`
: 1 error found
