* Scala CLI REPL
:PROPERTIES:
:CREATED:  [2023-07-20 Thu 20:59]
:ID:       182b6600-63c4-4a57-b86f-85fce8b8c3c2
:END:


The REPL of [[https://scala-cli.virtuslab.org/][scala-cli]] in Emacs term mode.

[[file:demo.gif]]

** Installation
:PROPERTIES:
:ID:       6108d70b-9d48-4328-b0ce-51dc12d09107
:END:

You can access the REPL loading =scala-cli-repl.el=.

If you like literate programming in Org Mode, you can load also
=ob-scala-cli.el=, which lets you run blocks like the following

#+begin_src org
,#+begin_src scala :scala-version 3.0.0 :dep '("com.lihaoyi::os-lib:0.9.0")
println("This is:" + os.pwd)
,#+end_src
#+end_src

into the scala-cli REPL.

*** Ob-scala-cli
:PROPERTIES:
:CREATED:  [2023-07-20 Thu 21:13]
:ID:       109cad9b-54ed-4095-aa29-8b30ec1955ac
:END:

It is sufficient to have =(scala . t)= in your
=org-babel-load-languages=, because ob-scala-cli will run for scala
org blocks. For more information on how to enable an org babel
language check [[https://www.gnu.org/software/emacs/manual/html_node/org/Languages.html][here]] and [[https://orgmode.org/worg/org-contrib/babel/languages/index.html][here]].

If you use lsp-mode and lsp-metals, you can also setup IDE style
completion from within a src block with =ob-scala-cli-lsp-org=:

[[file:demo-ob-scala-cli.gif]]

*** Installing scala-cli

You can check the instructions for your platform on https://scala-cli.virtuslab.org/install/.

At the time of writing this, the easy way (on Linux) is:

#+begin_src sh
curl -fL https://github.com/Virtuslab/scala-cli/releases/latest/download/scala-cli-x86_64-pc-linux.gz | gzip -d > scala-cli
chmod +x scala-cli
sudo mv scala-cli /usr/local/bin/scala-cli
#+end_src

** Org Babel
*** Supported parameters
:PROPERTIES:
:CREATED:  [2023-07-20 Thu 21:11]
:ID:       83d7d014-62dc-457c-9210-ec05661265fb
:END:

Currently supported header parameters are:

- :scala-version

  you can define the Scala version you want your code to be evaluated in.

- :dep

  you pass a list of dependencies [[https://scala-cli.virtuslab.org/docs/reference/dependency/][in Mill format]] as a list, see example block above

- :jvm

  you can set the JVM version to use for evaluating your code

**Note**: the code is evaluated in a global scope by default, so you can use variables and functions across the blocks.
If you don't want definitions to leak, wrap them in curly braces.
  
If you enjoy Elisp, you can get an updated list of valid parameters
evaluating =ob-scala-cli-supported-params=.

Also see usage [[ob-scala-cli-tests.org][examples]].

*** Useful options

- =ob-scala-cli-default-params=

  you can define default parameters locally or globally and don't specify them each block. Example:

  #+begin_src elisp :results none
  (setq ob-scala-cli-default-params '(:scala-version "2.13.11" :jvm 17))
  #+end_src

  then just write a code:

  #+begin_src scala
  println(s"""
   |Scala version: ${scala.util.Properties.versionString}
   |JVM version: ${System.getProperty("java.version")}""".stripMargin)
  #+end_src

  #+RESULTS:
  : Scala version: version 2.13.11
  : JVM version: 17.0.8

  **Note**: if you use dependencies in multiple blocks specify also =:deps= for faster evaluation.

- =scala-cli-ob-force-kill=

  if you run blocks with different options (Scala version, JVM version, deps, etc.), you could face with an error:
  #+begin_quote
  Buffer "*Scala-Cli*" has a running process; kill it? (y or n)
  #+end_quote

  Set this flag if you want to forcely kill the process and the buffer.

** Similar projects
:PROPERTIES:
:CREATED:  [2023-07-20 Thu 21:02]
:END:

This is a port of [[https://github.com/zwild/ammonite-term-repl][ammonite-term-repl]], which is now an archived
repository.

You can still use Ammonite through this mode with:

#+begin_src elisp
(setq scala-cli-repl-program-args '("--power" "--amm"))
#+end_src
